{"ast":null,"code":"var _jsxFileName = \"/Users/yokohamakaito/Desktop/chatFirebase/src/dashboard/dashboard.js\";\nimport React from \"react\";\nimport ChatList from \"../chatList/chatList\";\nimport { Button, withStyles } from \"@material-ui/core\";\nimport styles from \"./style\";\nimport ChatViewComponent from '../chatview/chatView';\nimport ChatTextBox from '../chattextbox/chattextbox';\nimport NewChatComponent from '../newChat/newChat';\n\nconst firebase = require(\"firebase\");\n\nclass DashbordComponent extends React.Component {\n  constructor() {\n    super();\n\n    this.signOut = () => firebase.auth().signOut();\n\n    this.selectChat = chatIndex => {\n      this.setState({\n        selectChat: chatIndex,\n        newChatFormVisible: false\n      });\n      console.log({\n        selectChat: chatIndex\n      }, chatIndex);\n    };\n\n    this.submitMessage = msg => {\n      console.log(1111);\n      console.log(this.state.newChatFormVisible);\n      console.log(1111);\n      const docKey = this.buildDocKey(this.state.chats[this.state.selectChat].users.filter(_usr => _usr !== this.state.email)[0]);\n      console.log(docKey);\n      firebase.firestore().collection('chats').doc(docKey).update({\n        messages: firebase.firestore.FieldValue.arrayUnion({\n          message: msg,\n          sender: this.state.email\n        }),\n        receiverHasRead: false\n      });\n    };\n\n    this.goToChat = async (docKey, msg) => {\n      const usersInChat = docKey.split(':');\n      const chat = this.state.chats.find(_chat => usersInChat.every(_user => _chat.users.includes(_user)));\n      this.setState({\n        newChatFormVisible: false\n      });\n      await this.selectChat(this.state.chats.indexOf(chat));\n      this.submitMessage(msg);\n    };\n\n    this.buildDocKey = friend => [friend, this.state.email].sort().join(':');\n\n    this.newChatBtnClicked = () => this.setState({\n      newChatFormVisible: true,\n      selectChat: null\n    });\n\n    this.newChatSubmit = async chatObj => {\n      const docKey = this.buildDocKey(chatObj.sendTo);\n      await firebase.firestore().collection('chats').doc(docKey).set({\n        messages: [{\n          message: chatObj.message,\n          sender: this.state.email\n        }],\n        users: [this.state.email, chatObj.sendTo],\n        receiverHasRead: false\n      });\n      this.setState({\n        newChatFormVisible: false\n      });\n      this.selectChat(this.state.chats.length - 1);\n    };\n\n    this.componentWillMount = () => {\n      firebase.auth().onAuthStateChanged(async _usr => {\n        if (!_usr) this.props.history.push('/login');else {\n          await firebase.firestore().collection('chats').where('users', 'array-contains', _usr.email).onSnapshot(async res => {\n            const chats = res.docs.map(_doc => _doc.data());\n            await this.setState({\n              email: _usr.email,\n              chats: chats,\n              friends: []\n            });\n          });\n        }\n      });\n    };\n\n    this.state = {\n      selectChat: null,\n      newChatFormVisible: false,\n      email: null,\n      chats: []\n    };\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ChatList, {\n      history: this.props.history,\n      newChatBtnFn: this.newChatBtnClicked,\n      selectChatFn: this.selectChat,\n      chats: this.state.chats,\n      userEmail: this.state.email,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }, \" \"), this.state.newChatFormVisible ? null : /*#__PURE__*/React.createElement(ChatViewComponent, {\n      user: this.state.email,\n      chat: this.state.chats[this.state.selectChat],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }\n    }), this.state.selectChat !== null && !this.state.newChatFormVisible ? /*#__PURE__*/React.createElement(ChatTextBox, {\n      submitMessageFn: this.submitMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }\n    }) : null, this.state.newChatFormVisible ? /*#__PURE__*/React.createElement(NewChatComponent, {\n      goToChatFn: this.goToChat,\n      newChatSubmitFn: this.newChatSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 43\n      }\n    }) : null, /*#__PURE__*/React.createElement(Button, {\n      className: classes.signOutBtn,\n      onClick: this.signOut,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, \"Sign Out\"));\n  }\n\n}\n\nexport default withStyles(styles)(DashbordComponent);","map":{"version":3,"sources":["/Users/yokohamakaito/Desktop/chatFirebase/src/dashboard/dashboard.js"],"names":["React","ChatList","Button","withStyles","styles","ChatViewComponent","ChatTextBox","NewChatComponent","firebase","require","DashbordComponent","Component","constructor","signOut","auth","selectChat","chatIndex","setState","newChatFormVisible","console","log","submitMessage","msg","state","docKey","buildDocKey","chats","users","filter","_usr","email","firestore","collection","doc","update","messages","FieldValue","arrayUnion","message","sender","receiverHasRead","goToChat","usersInChat","split","chat","find","_chat","every","_user","includes","indexOf","friend","sort","join","newChatBtnClicked","newChatSubmit","chatObj","sendTo","set","length","componentWillMount","onAuthStateChanged","props","history","push","where","onSnapshot","res","docs","map","_doc","data","friends","render","classes","signOutBtn"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ChatList from \"../chatList/chatList\";\nimport { Button, withStyles } from \"@material-ui/core\";\nimport styles from \"./style\";\nimport ChatViewComponent from '../chatview/chatView'\nimport ChatTextBox from '../chattextbox/chattextbox'\nimport NewChatComponent from '../newChat/newChat'\nconst firebase = require(\"firebase\");\nclass DashbordComponent extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      selectChat: null,\n      newChatFormVisible: false,\n      email: null,\n      chats: []\n    };\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <div>\n        <ChatList\n          history={this.props.history}\n          newChatBtnFn={this.newChatBtnClicked}\n          selectChatFn={this.selectChat}\n          chats={this.state.chats}                 \n          userEmail={this.state.email}                 \n        >                 \n          {\" \"}                 \n        </ChatList>                 \n        {                 \n            this.state.newChatFormVisible?                  \n            null:                 \n            <ChatViewComponent                 \n                user={this.state.email}                 \n                chat={this.state.chats[this.state.selectChat]}                 \n            ></ChatViewComponent>                 \n        }                 \n        {\n          this.state.selectChat !== null && !this.state.newChatFormVisible?\n          <ChatTextBox submitMessageFn={this.submitMessage}/>:null\n        }\n        {\n          this.state.newChatFormVisible ? <NewChatComponent goToChatFn={this.goToChat} newChatSubmitFn={this.newChatSubmit}></NewChatComponent>:null\n        }\n\n        <Button className={classes.signOutBtn} onClick={this.signOut}>\n          Sign Out\n        </Button>\n      </div>\n    );\n  }\n\n  signOut= () =>firebase.auth().signOut();\n\n  selectChat = chatIndex => {\n    this.setState({selectChat:chatIndex ,newChatFormVisible:false})\n    console.log({selectChat:chatIndex},chatIndex)\n  };\n\n  submitMessage = (msg) => {\n    console.log(1111)\n    console.log(this.state.newChatFormVisible)\n    console.log(1111)\n    const docKey = this.buildDocKey(this.state.chats[this.state.selectChat]\n      .users\n      .filter(_usr => _usr !== this.state.email)[0])\n      console.log(docKey)\n    firebase\n      .firestore()\n      .collection('chats')\n      .doc(docKey)\n      .update({\n        messages: firebase.firestore.FieldValue.arrayUnion({\n          message: msg,\n          sender: this.state.email\n        }),\n        receiverHasRead: false\n      });\n  }\n\n  goToChat = async (docKey, msg) =>{\n    const usersInChat = docKey.split(':')\n    const chat = this.state.chats.find(_chat => usersInChat.every(_user =>_chat.users.includes(_user)));\n    this.setState({newChatFormVisible:false})\n    await this.selectChat(this.state.chats.indexOf(chat));\n    this.submitMessage(msg)\n  }\n\n  buildDocKey = (friend) =>[friend,this.state.email].sort().join(':')\n\n  newChatBtnClicked = () =>\n    this.setState({ newChatFormVisible: true, selectChat: null });\n\n    newChatSubmit = async (chatObj) =>{\n      const docKey = this.buildDocKey(chatObj.sendTo);\n      await \n      firebase\n       .firestore()\n       .collection('chats')\n       .doc(docKey)\n       .set({\n         messages:[{\n           message:chatObj.message,\n           sender:this.state.email\n         }],\n         users:[this.state.email, chatObj.sendTo],\n         receiverHasRead :false\n       })\n       this.setState({newChatFormVisible:false});\n       this.selectChat(this.state.chats.length - 1)\n    }\n\n    componentWillMount = () => {\n      firebase.auth().onAuthStateChanged(async _usr => {\n        if(!_usr)\n          this.props.history.push('/login');\n        else {\n          await firebase\n            .firestore()\n            .collection('chats')\n            .where('users', 'array-contains', _usr.email)\n            .onSnapshot(async res => {\n              const chats = res.docs.map(_doc => _doc.data());\n              await this.setState({\n                email: _usr.email,\n                chats: chats,\n                friends: []\n              });\n            })\n        }\n    });\n  }\n}\n\nexport default withStyles(styles)(DashbordComponent);"]},"metadata":{},"sourceType":"module"}