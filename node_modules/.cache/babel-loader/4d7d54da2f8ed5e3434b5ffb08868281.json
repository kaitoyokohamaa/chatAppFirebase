{"ast":null,"code":"var _jsxFileName = \"/Users/yokohamakaito/Desktop/chatAppFirebase/src/dashboard/dashboard.js\";\nimport React from \"react\";\nimport ChatList from \"../chatList/chatList\";\nimport { Button, withStyles } from \"@material-ui/core\";\nimport styles from \"./style\";\nimport ChatViewComponent from '../chatview/chatView';\nimport ChatTextBox from '../chattextbox/chattextbox';\nimport NewChatForm from '../newChat/newChat';\n\nconst firebase = require(\"firebase\");\n\nclass DashbordComponent extends React.Component {\n  constructor() {\n    super();\n\n    this.signOut = () => firebase.auth().signOut();\n\n    this.submitMessage = msg => {\n      const docKey = this.buildDocKey(this.state.chats[this.state.selectedChat].users.filter(_usr => _usr !== this.state.email)[0]);\n      firebase.firestore().collection('chats').doc(docKey).update({\n        messages: firebase.firestore.FieldValue.arrayUnion({\n          sender: this.state.email,\n          message: msg,\n          timestamp: Date.now()\n        }),\n        receiverHasRead: false\n      });\n    };\n\n    this.buildDocKey = friend => [this.state.email, friend].sort().join(':');\n\n    this.newChatBtnClicked = () => this.setState({\n      newChatFormVisible: true,\n      selectedChat: null\n    });\n\n    this.newChatSubmit = async chatObj => {\n      const docKey = this.buildDocKey(chatObj.sendTo);\n      await firebase.firestore().collection('chats').doc(docKey).set({\n        messages: [{\n          message: chatObj.message,\n          sender: this.state.email\n        }],\n        users: [this.state.email, chatObj.sendTo],\n        receiverHasRead: false\n      });\n      this.setState({\n        newChatFormVisible: false\n      });\n      this.selectChat(this.state.chats.length - 1);\n    };\n\n    this.selectChat = async chatIndex => {\n      await this.setState({\n        selectedChat: chatIndex,\n        newChatFormVisible: false\n      });\n      this.messageRead();\n    };\n\n    this.goToChat = async (docKey, msg) => {\n      const usersInChat = docKey.split(':');\n      const chat = this.state.chats.find(_chat => usersInChat.every(_user => _chat.users.includes(_user)));\n      this.setState({\n        newChatFormVisible: false\n      });\n      await this.selectChat(this.state.chats.indexOf(chat));\n      this.submitMessage(msg);\n    };\n\n    this.messageRead = () => {\n      const chatIndex = this.state.selectedChat;\n      const docKey = this.buildDocKey(this.state.chats[chatIndex].users.filter(_usr => _usr !== this.state.email)[0]);\n\n      if (this.clickedMessageWhereNotSender(chatIndex)) {\n        firebase.firestore().collection('chats').doc(docKey).update({\n          receiverHasRead: true\n        });\n      } else {\n        console.log('Clicked message where the user was the sender');\n      }\n    };\n\n    this.clickedMessageWhereNotSender = chatIndex => this.state.chats[chatIndex].messages[this.state.chats[chatIndex].messages.length - 1].sender !== this.state.email;\n\n    this.componentWillMount = () => {\n      firebase.auth().onAuthStateChanged(async _usr => {\n        if (!_usr) this.props.history.push('/login');else {\n          await firebase.firestore().collection('chats').where('users', 'array-contains', _usr.email).onSnapshot(async res => {\n            const chats = res.docs.map(_doc => _doc.data());\n            await this.setState({\n              email: _usr.email,\n              chats: chats,\n              friends: []\n            });\n          });\n        }\n      });\n    };\n\n    this.state = {\n      selectChat: null,\n      newChatFormVisible: false,\n      email: null,\n      chats: []\n    };\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ChatList, {\n      history: this.props.history,\n      newChatBtnFn: this.newChatBtnClicked,\n      selectChatFn: this.selectChat,\n      chats: this.state.chats,\n      userEmail: this.state.email,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }, \" \"), this.state.newChatFormVisible ? null : /*#__PURE__*/React.createElement(ChatViewComponent, {\n      user: this.state.email,\n      chat: this.state.chats[this.state.selectChat],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }\n    }), this.state.selectChat !== null && !this.state.newChatFormVisible ? /*#__PURE__*/React.createElement(ChatTextBox, {\n      userClickedInputFn: this.messageRead,\n      submitMessageFn: this.submitMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }\n    }) : null, this.state.newChatFormVisible ? /*#__PURE__*/React.createElement(NewChatForm, {\n      goToChatFn: this.goToChat,\n      newChatSubmitFn: this.newChatSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 43\n      }\n    }) : null, /*#__PURE__*/React.createElement(Button, {\n      className: classes.signOutBtn,\n      onClick: this.signOut,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, \"Sign Out\"));\n  } //   signOut= () =>firebase.auth().signOut();\n  //   selectChat = async(chatIndex) => {\n  //    await this.setState({selectChat:chatIndex})\n  //     console.log('セレクトOK')\n  //     this.messageRead()\n  //     console.log('メッセージリードOK')\n  //   };\n  //   submitMessage = (msg) => {\n  //     console.log(1111)\n  //     console.log(this.state.newChatFormVisible)\n  //     console.log(1111)\n  //     const docKey = this.buildDocKey(this.state.chats[this.state.selectChat]\n  //       .users\n  //       .filter(_usr => _usr !== this.state.email)[0])\n  //       console.log(docKey)\n  //     firebase\n  //       .firestore()\n  //       .collection('chats')\n  //       .doc(docKey)\n  //       .update({\n  //         messages: firebase.firestore.FieldValue.arrayUnion({\n  //           message: msg,\n  //           sender: this.state.email\n  //         }),\n  //         receiverHasRead: false\n  //       });\n  //   }\n  //   buildDocKey = (friend) => [friend,this.state.email].sort().join(':');\n  // 　goToChat = async (docKey,msg) =>{\n  //   const usersInChat= docKey.split(':')\n  //   const chat = this.state.chats.find(_chat => usersInChat.every(_user =>_chat.users.includes(_user)))\n  //   this.setState({newChatFormVisible :false});\n  //   await this.selectChat(this.state.chats.indexOf(chat))\n  //   this.submitMessage(msg)\n  // }\n  //   newChatSubmit = async (chatObj) =>{\n  //     const docKey = this.buildDocKey(chatObj.sendTo);\n  //     console.log(22)\n  //     console.log(docKey)\n  //     console.log(22)\n  //     await firebase\n  //           .firestore()\n  //           .collection('chats')\n  //           .doc(docKey)\n  //           .set({\n  //             receiverHasRead:false,\n  //             users:[this.state.email,chatObj.sendTo],\n  //             message:[{\n  //               message:chatObj.message,\n  //               sender:this.state.email\n  //             }]\n  //           })\n  //           this.setState({newChatFormVisible:false})\n  //           this.selectChat(this.state.chats.length -1)\n  //   }\n  //   clickedMessageWhereNotSender = (chatIndex) => this.state.chats[chatIndex].messages[this.state.chats[chatIndex].messages.length - 1].sender !== this.state.email;\n  //      messageRead = () => {\n  //       const docKey = this.buildDocKey(this.state.chats[this.state.selectChat]\n  //         .users\n  //         .filter(_usr => _usr !== this.state.email)[0])\n  //         console.log(22)\n  //         console.log(docKey)\n  //         console.log(22)\n  //       if(this.clickedMessageWhereNotSender(this.state.selectChat)) {\n  //         firebase\n  //           .firestore()\n  //           .collection('chats')\n  //           .doc(docKey)\n  //           .update({ receiverHasRead: true });\n  //       } else {\n  //         console.log('Clicked message where the user was the sender');\n  //       }\n  //     }\n  //   newChatBtnClicked = () =>\n  //     this.setState({ newChatFormVisible: true, selectChat: null });\n  //     componentWillMount = () => {\n  //       firebase.auth().onAuthStateChanged(async _usr => {\n  //         if(!_usr)\n  //           this.props.history.push('/login');\n  //         else {\n  //           await firebase\n  //             .firestore()\n  //             .collection('chats')\n  //             .where('users', 'array-contains', _usr.email)\n  //             .onSnapshot(async res => {\n  //               const chats = res.docs.map(_doc => _doc.data());\n  //               await this.setState({\n  //                 email: _usr.email,\n  //                 chats: chats,\n  //                 friends: []\n  //               });\n  //             })\n  //         }\n  //     });\n  //   }\n\n\n}\n\nexport default withStyles(styles)(DashbordComponent);","map":{"version":3,"sources":["/Users/yokohamakaito/Desktop/chatAppFirebase/src/dashboard/dashboard.js"],"names":["React","ChatList","Button","withStyles","styles","ChatViewComponent","ChatTextBox","NewChatForm","firebase","require","DashbordComponent","Component","constructor","signOut","auth","submitMessage","msg","docKey","buildDocKey","state","chats","selectedChat","users","filter","_usr","email","firestore","collection","doc","update","messages","FieldValue","arrayUnion","sender","message","timestamp","Date","now","receiverHasRead","friend","sort","join","newChatBtnClicked","setState","newChatFormVisible","newChatSubmit","chatObj","sendTo","set","selectChat","length","chatIndex","messageRead","goToChat","usersInChat","split","chat","find","_chat","every","_user","includes","indexOf","clickedMessageWhereNotSender","console","log","componentWillMount","onAuthStateChanged","props","history","push","where","onSnapshot","res","docs","map","_doc","data","friends","render","classes","signOutBtn"],"mappings":"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AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAhC,GAA4H,IAvBhI,eAyBE,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAEmC,OAAO,CAACC,UAA3B;AAAuC,MAAA,OAAO,EAAE,KAAKpE,OAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAzBF,CADF;AA+BD,GA3C6C,CA6IhD;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAjPgD;;AAoPhD,eAAeV,UAAU,CAACC,MAAD,CAAV,CAAmBM,iBAAnB,CAAf","sourcesContent":["import React from \"react\";\nimport ChatList from \"../chatList/chatList\";\nimport { Button, withStyles } from \"@material-ui/core\";\nimport styles from \"./style\";\nimport ChatViewComponent from '../chatview/chatView'\nimport ChatTextBox from '../chattextbox/chattextbox';\nimport NewChatForm from '../newChat/newChat'\nconst firebase = require(\"firebase\");\nclass DashbordComponent extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      selectChat: null,\n      newChatFormVisible: false,\n      email: null,\n      chats: []\n    };\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <div>\n        <ChatList\n          history={this.props.history}\n          newChatBtnFn={this.newChatBtnClicked}\n          selectChatFn={this.selectChat}\n          chats={this.state.chats}                 \n          userEmail={this.state.email}                 \n        >                 \n          {\" \"}                 \n        </ChatList>                 \n        {                 \n            this.state.newChatFormVisible?                  \n            null:                 \n            <ChatViewComponent                 \n                user={this.state.email}                 \n                chat={this.state.chats[this.state.selectChat]}                 \n            ></ChatViewComponent>                 \n        }                 \n        {\n          this.state.selectChat !== null && !this.state.newChatFormVisible?\n          <ChatTextBox　userClickedInputFn={this.messageRead}  submitMessageFn={this.submitMessage}/>:null\n        }\n        {\n          this.state.newChatFormVisible ? <NewChatForm goToChatFn={this.goToChat} newChatSubmitFn={this.newChatSubmit}></NewChatForm>:null\n        }\n        <Button className={classes.signOutBtn} onClick={this.signOut}>\n          Sign Out\n        </Button>\n      </div>\n    );\n  }\n  signOut = () => firebase.auth().signOut();\n\n  submitMessage = (msg) => {\n    const docKey = this.buildDocKey(this.state.chats[this.state.selectedChat]\n      .users\n      .filter(_usr => _usr !== this.state.email)[0])\n    firebase\n      .firestore()\n      .collection('chats')\n      .doc(docKey)\n      .update({\n        messages: firebase.firestore.FieldValue.arrayUnion({\n          sender: this.state.email,\n          message: msg,\n          timestamp: Date.now()\n        }),\n        receiverHasRead: false\n      });\n  }\n\n  // Always in alphabetical order:\n  // 'user1:user2'\n  buildDocKey = (friend) => [this.state.email, friend].sort().join(':');\n\n  newChatBtnClicked = () => this.setState({ newChatFormVisible: true, selectedChat: null });\n\n  newChatSubmit = async (chatObj) => {\n    const docKey = this.buildDocKey(chatObj.sendTo);\n    await \n      firebase\n        .firestore()\n        .collection('chats')\n        .doc(docKey)\n        .set({\n          messages: [{\n            message: chatObj.message,\n            sender: this.state.email\n          }],\n          users: [this.state.email, chatObj.sendTo],\n          receiverHasRead: false\n        })\n    this.setState({ newChatFormVisible: false });\n    this.selectChat(this.state.chats.length - 1);\n  }\n\n  selectChat = async (chatIndex) => {\n    await this.setState({ selectedChat: chatIndex, newChatFormVisible: false });\n    this.messageRead();\n  }\n\n  goToChat = async (docKey, msg) => {\n    const usersInChat = docKey.split(':');\n    const chat = this.state.chats.find(_chat => usersInChat.every(_user => _chat.users.includes(_user)));\n    this.setState({ newChatFormVisible: false });\n    await this.selectChat(this.state.chats.indexOf(chat));\n    this.submitMessage(msg);\n  }\n\n  // Chat index could be different than the one we are currently on in the case\n  // that we are calling this function from within a loop such as the chatList.\n  // So we will set a default value and can overwrite it when necessary.\n  messageRead = () => {\n    const chatIndex = this.state.selectedChat;\n    const docKey = this.buildDocKey(this.state.chats[chatIndex].users.filter(_usr => _usr !== this.state.email)[0]);\n    if(this.clickedMessageWhereNotSender(chatIndex)) {\n      firebase\n        .firestore()\n        .collection('chats')\n        .doc(docKey)\n        .update({ receiverHasRead: true });\n    } else {\n      console.log('Clicked message where the user was the sender');\n    }\n  }\n\n  clickedMessageWhereNotSender = (chatIndex) => this.state.chats[chatIndex].messages[this.state.chats[chatIndex].messages.length - 1].sender !== this.state.email;\n\n  componentWillMount = () => {\n      firebase.auth().onAuthStateChanged(async _usr => {\n        if(!_usr)\n          this.props.history.push('/login');\n        else {\n          await firebase\n            .firestore()\n            .collection('chats')\n            .where('users', 'array-contains', _usr.email)\n            .onSnapshot(async res => {\n              const chats = res.docs.map(_doc => _doc.data());\n              await this.setState({\n                email: _usr.email,\n                chats: chats,\n                friends: []\n              });\n            })\n        }\n    });\n  }\n//   signOut= () =>firebase.auth().signOut();\n\n//   selectChat = async(chatIndex) => {\n//    await this.setState({selectChat:chatIndex})\n//     console.log('セレクトOK')\n//     this.messageRead()\n//     console.log('メッセージリードOK')\n//   };\n\n//   submitMessage = (msg) => {\n//     console.log(1111)\n//     console.log(this.state.newChatFormVisible)\n//     console.log(1111)\n//     const docKey = this.buildDocKey(this.state.chats[this.state.selectChat]\n//       .users\n//       .filter(_usr => _usr !== this.state.email)[0])\n//       console.log(docKey)\n//     firebase\n//       .firestore()\n//       .collection('chats')\n//       .doc(docKey)\n//       .update({\n//         messages: firebase.firestore.FieldValue.arrayUnion({\n//           message: msg,\n//           sender: this.state.email\n//         }),\n//         receiverHasRead: false\n//       });\n//   }\n//   buildDocKey = (friend) => [friend,this.state.email].sort().join(':');\n// 　goToChat = async (docKey,msg) =>{\n//   const usersInChat= docKey.split(':')\n//   const chat = this.state.chats.find(_chat => usersInChat.every(_user =>_chat.users.includes(_user)))\n//   this.setState({newChatFormVisible :false});\n//   await this.selectChat(this.state.chats.indexOf(chat))\n//   this.submitMessage(msg)\n// }\n\n//   newChatSubmit = async (chatObj) =>{\n//     const docKey = this.buildDocKey(chatObj.sendTo);\n//     console.log(22)\n//     console.log(docKey)\n//     console.log(22)\n//     await firebase\n//           .firestore()\n//           .collection('chats')\n//           .doc(docKey)\n//           .set({\n//             receiverHasRead:false,\n//             users:[this.state.email,chatObj.sendTo],\n//             message:[{\n//               message:chatObj.message,\n//               sender:this.state.email\n//             }]\n//           })\n//           this.setState({newChatFormVisible:false})\n//           this.selectChat(this.state.chats.length -1)\n//   }\n \n//   clickedMessageWhereNotSender = (chatIndex) => this.state.chats[chatIndex].messages[this.state.chats[chatIndex].messages.length - 1].sender !== this.state.email;\n//      messageRead = () => {\n//       const docKey = this.buildDocKey(this.state.chats[this.state.selectChat]\n//         .users\n//         .filter(_usr => _usr !== this.state.email)[0])\n//         console.log(22)\n//         console.log(docKey)\n//         console.log(22)\n//       if(this.clickedMessageWhereNotSender(this.state.selectChat)) {\n//         firebase\n//           .firestore()\n//           .collection('chats')\n//           .doc(docKey)\n//           .update({ receiverHasRead: true });\n//       } else {\n//         console.log('Clicked message where the user was the sender');\n//       }\n//     }\n\n//   newChatBtnClicked = () =>\n//     this.setState({ newChatFormVisible: true, selectChat: null });\n\n//     componentWillMount = () => {\n//       firebase.auth().onAuthStateChanged(async _usr => {\n//         if(!_usr)\n//           this.props.history.push('/login');\n//         else {\n//           await firebase\n//             .firestore()\n//             .collection('chats')\n//             .where('users', 'array-contains', _usr.email)\n//             .onSnapshot(async res => {\n//               const chats = res.docs.map(_doc => _doc.data());\n//               await this.setState({\n//                 email: _usr.email,\n//                 chats: chats,\n//                 friends: []\n//               });\n//             })\n//         }\n//     });\n//   }\n}\n\nexport default withStyles(styles)(DashbordComponent);\n"]},"metadata":{},"sourceType":"module"}