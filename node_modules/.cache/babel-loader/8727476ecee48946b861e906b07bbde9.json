{"ast":null,"code":"var _jsxFileName = \"/Users/yokohamakaito/Desktop/chatAppFirebase/src/dashboard/dashboard.js\";\nimport React from \"react\";\nimport ChatList from \"../chatList/chatList\";\nimport { Button, withStyles } from \"@material-ui/core\";\nimport styles from \"./style\";\nimport ChatViewComponent from '../chatview/chatView';\nimport ChatTextBox from '../chattextbox/chattextbox';\n\nconst firebase = require(\"firebase\");\n\nclass DashbordComponent extends React.Component {\n  constructor() {\n    super();\n\n    this.signOut = () => firebase.auth().signOut();\n\n    this.selectChat = async chatIndex => {\n      this.setState({\n        selectChat: chatIndex\n      });\n      console.log({\n        selectChat: chatIndex\n      });\n      this.messageRead();\n    };\n\n    this.submitMessage = msg => {\n      console.log(1111);\n      console.log(this.state.newChatFormVisible);\n      console.log(1111);\n      const docKey = this.buildDocKey(this.state.chats[this.state.selectChat].users.filter(_usr => _usr !== this.state.email)[0]);\n      console.log(docKey);\n      firebase.firestore().collection('chats').doc(docKey).update({\n        messages: firebase.firestore.FieldValue.arrayUnion({\n          message: msg,\n          sender: this.state.email\n        }),\n        receiverHasRead: false\n      });\n    };\n\n    this.buildDocKey = friend => {\n      [this.state.email, friend].sort().join(':');\n      console.log([friend, this.state.email].sort().join(':'));\n    };\n\n    this.clickedMessageWhereNotSender = chatIndex => this.state.chats[chatIndex].messages[this.state.chats[chatIndex].messages.length - 1].sender !== this.state.email;\n\n    this.messageRead = () => {\n      const docKey = this.buildDocKey(this.state.chats[this.state.selectChat].users.filter(_usr => _usr !== this.state.email)[0]);\n      console.log(docKey); // if(this.clickedMessageWhereNotSender(chatIndex)) {\n      //   firebase\n      //     .firestore()\n      //     .collection('chats')\n      //     .doc(docKey)\n      //     .update({ receiverHasRead: true });\n      // } else {\n\n      console.log('Clicked message where the user was the sender'); // }\n    };\n\n    this.newChatBtnClicked = () => this.setState({\n      newChatFormVisible: true,\n      selectChat: null\n    });\n\n    this.componentWillMount = () => {\n      firebase.auth().onAuthStateChanged(async _usr => {\n        if (!_usr) this.props.history.push('/login');else {\n          await firebase.firestore().collection('chats').where('users', 'array-contains', _usr.email).onSnapshot(async res => {\n            const chats = res.docs.map(_doc => _doc.data());\n            await this.setState({\n              email: _usr.email,\n              chats: chats,\n              friends: []\n            });\n          });\n        }\n      });\n    };\n\n    this.state = {\n      selectChat: null,\n      newChatFormVisible: false,\n      email: null,\n      chats: []\n    };\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ChatList, {\n      history: this.props.history,\n      newChatBtnFn: this.newChatBtnClicked,\n      selectChatFn: this.selectChat,\n      chats: this.state.chats,\n      userEmail: this.state.email,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }\n    }, \" \"), this.state.newChatFormVisible ? null : /*#__PURE__*/React.createElement(ChatViewComponent, {\n      user: this.state.email,\n      chat: this.state.chats[this.state.selectChat],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }\n    }), this.state.selectChat !== null && !this.state.newChatFormVisible ? /*#__PURE__*/React.createElement(ChatTextBox, {\n      submitMessageFn: this.submitMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }\n    }) : null, /*#__PURE__*/React.createElement(Button, {\n      className: classes.signOutBtn,\n      onClick: this.signOut,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, \"Sign Out\"));\n  }\n\n}\n\nexport default withStyles(styles)(DashbordComponent);","map":{"version":3,"sources":["/Users/yokohamakaito/Desktop/chatAppFirebase/src/dashboard/dashboard.js"],"names":["React","ChatList","Button","withStyles","styles","ChatViewComponent","ChatTextBox","firebase","require","DashbordComponent","Component","constructor","signOut","auth","selectChat","chatIndex","setState","console","log","messageRead","submitMessage","msg","state","newChatFormVisible","docKey","buildDocKey","chats","users","filter","_usr","email","firestore","collection","doc","update","messages","FieldValue","arrayUnion","message","sender","receiverHasRead","friend","sort","join","clickedMessageWhereNotSender","length","newChatBtnClicked","componentWillMount","onAuthStateChanged","props","history","push","where","onSnapshot","res","docs","map","_doc","data","friends","render","classes","signOutBtn"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ChatList from \"../chatList/chatList\";\nimport { Button, withStyles } from \"@material-ui/core\";\nimport styles from \"./style\";\nimport ChatViewComponent from '../chatview/chatView'\nimport ChatTextBox from '../chattextbox/chattextbox'\nconst firebase = require(\"firebase\");\nclass DashbordComponent extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      selectChat: null,\n      newChatFormVisible: false,\n      email: null,\n      chats: []\n    };\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <div>\n        <ChatList\n          history={this.props.history}\n          newChatBtnFn={this.newChatBtnClicked}\n          selectChatFn={this.selectChat}\n          chats={this.state.chats}                 \n          userEmail={this.state.email}                 \n        >                 \n          {\" \"}                 \n        </ChatList>                 \n        {                 \n            this.state.newChatFormVisible?                  \n            null:                 \n            <ChatViewComponent                 \n                user={this.state.email}                 \n                chat={this.state.chats[this.state.selectChat]}                 \n            ></ChatViewComponent>                 \n        }                 \n        {\n          this.state.selectChat !== null && !this.state.newChatFormVisible?\n          <ChatTextBox submitMessageFn={this.submitMessage}/>:null\n        }\n        <Button className={classes.signOutBtn} onClick={this.signOut}>\n          Sign Out\n        </Button>\n      </div>\n    );\n  }\n  signOut= () =>firebase.auth().signOut();\n\n  selectChat = async(chatIndex) => {\n    this.setState({selectChat:chatIndex})\n    console.log(({selectChat:chatIndex}))\n    this.messageRead();\n  };\n\n  submitMessage = (msg) => {\n    console.log(1111)\n    console.log(this.state.newChatFormVisible)\n    console.log(1111)\n    const docKey = this.buildDocKey(this.state.chats[this.state.selectChat]\n      .users\n      .filter(_usr => _usr !== this.state.email)[0])\n      console.log(docKey)\n    firebase\n      .firestore()\n      .collection('chats')\n      .doc(docKey)\n      .update({\n        messages: firebase.firestore.FieldValue.arrayUnion({\n          message: msg,\n          sender: this.state.email\n        }),\n        receiverHasRead: false\n      });\n  }\n  buildDocKey = (friend) =>\n  {\n    [this.state.email,friend].sort().join(':')\n  console.log([friend,this.state.email].sort().join(':'))\n}\n  clickedMessageWhereNotSender = (chatIndex) => this.state.chats[chatIndex].messages[this.state.chats[chatIndex].messages.length - 1].sender !== this.state.email;\n  \n  messageRead = () => {\n    const docKey = this.buildDocKey(this.state.chats[this.state.selectChat]\n      .users\n      .filter(_usr => _usr !== this.state.email)[0])\n      console.log(docKey)\n    // if(this.clickedMessageWhereNotSender(chatIndex)) {\n    //   firebase\n    //     .firestore()\n    //     .collection('chats')\n    //     .doc(docKey)\n    //     .update({ receiverHasRead: true });\n    // } else {\n      console.log('Clicked message where the user was the sender');\n    // }\n  }\n\n \n\n  newChatBtnClicked = () =>\n    this.setState({ newChatFormVisible: true, selectChat: null });\n\n    componentWillMount = () => {\n      firebase.auth().onAuthStateChanged(async _usr => {\n        if(!_usr)\n          this.props.history.push('/login');\n        else {\n          await firebase\n            .firestore()\n            .collection('chats')\n            .where('users', 'array-contains', _usr.email)\n            .onSnapshot(async res => {\n              const chats = res.docs.map(_doc => _doc.data());\n              await this.setState({\n                email: _usr.email,\n                chats: chats,\n                friends: []\n              });\n            })\n        }\n    });\n  }\n}\n\nexport default withStyles(styles)(DashbordComponent);\n"]},"metadata":{},"sourceType":"module"}