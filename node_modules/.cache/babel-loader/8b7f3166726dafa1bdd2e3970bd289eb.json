{"ast":null,"code":"import _classCallCheck from\"/Users/yokohamakaito/Desktop/chatFirebase/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/yokohamakaito/Desktop/chatFirebase/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _createSuper from\"/Users/yokohamakaito/Desktop/chatFirebase/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _inherits from\"/Users/yokohamakaito/Desktop/chatFirebase/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React from\"react\";import{withStyles}from\"@material-ui/core/styles\";import List from\"@material-ui/core/List\";import ListItem from\"@material-ui/core/ListItem\";import ListItemText from\"@material-ui/core/ListItemText\";import ListItemAvatar from\"@material-ui/core/ListItemAvatar\";import Avatar from\"@material-ui/core/Avatar\";import Typography from\"@material-ui/core/Typography\";import styles from\"./style\";import Divider from\"@material-ui/core/Divider\";import Button from\"@material-ui/core/Button\";import ListItemIcon from\"@material-ui/core/ListItemIcon\";import NotificationImportant from\"@material-ui/icons/NotificationImportant\";var ChatListaComponent=/*#__PURE__*/function(_React$Component){_inherits(ChatListaComponent,_React$Component);var _super=_createSuper(ChatListaComponent);function ChatListaComponent(){var _this;_classCallCheck(this,ChatListaComponent);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.newChat=function(){_this.props.newChatBtnFn();};_this.selectChat=function(index){_this.props.selectChatFn(index);};return _this;}_createClass(ChatListaComponent,[{key:\"render\",value:function render(){var _this2=this;var classes=this.props.classes;console.log(this.props.chats);if(this.props.chats.length===0&&this.props.chats===[]){console.log(this.props.chats.length);return/*#__PURE__*/React.createElement(\"div\",null,\"Loafding\");}else if(this.props.chats.length>0){console.log(this.props.chats);return/*#__PURE__*/React.createElement(\"main\",{className:classes.root},/*#__PURE__*/React.createElement(Button,{variant:\"contained\",fullWidth:true,color:\"primary\",className:classes.newChatBtn,onClick:this.newChat},\"\\u65B0\\u3057\\u3044\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8\"),/*#__PURE__*/React.createElement(List,null,this.props.chats.map(function(_chat,_index){return/*#__PURE__*/React.createElement(\"div\",{key:_index},/*#__PURE__*/React.createElement(ListItem,{onClick:function onClick(){return _this2.selectChat(_index);},className:classes.listItem,selected:_this2.props.selectedChatIndex===_index,alignItems:\"flex-start\"},/*#__PURE__*/React.createElement(ListItemAvatar,null,/*#__PURE__*/React.createElement(Avatar,{alt:\"Remy Sharp\"},_chat.users.filter(function(_user){return _user!==_this2.props.userEmail;})[0].split(\"\")[0])),/*#__PURE__*/React.createElement(ListItemText,{primary:_chat.users.filter(function(_user){return _user!==_this2.props.userEmail;})[0],secondary:/*#__PURE__*/React.createElement(Typography,{component:\"span\",color:\"textPrimary\"},_chat.messages===undefined?null:_chat.messages[_chat.messages.length-1].message.substring(0,30))})),/*#__PURE__*/React.createElement(Divider,null));})));}else{return/*#__PURE__*/React.createElement(\"main\",{className:classes.root},/*#__PURE__*/React.createElement(Button,{variant:\"contained\",fullWidth:true,color:\"primary\",onClick:this.newChat,className:classes.newChatBtn},\"\\u304A\\u30CB\\u30E5\\u30FC\\u306A\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8\"),/*#__PURE__*/React.createElement(List,null));}}// userIsSender = (chat) => chat.messages[chat.messages.length - 1].sender === this.props.userEmail;\n}]);return ChatListaComponent;}(React.Component);export default withStyles(styles)(ChatListaComponent);","map":{"version":3,"sources":["/Users/yokohamakaito/Desktop/chatFirebase/src/chatList/chatList.js"],"names":["React","withStyles","List","ListItem","ListItemText","ListItemAvatar","Avatar","Typography","styles","Divider","Button","ListItemIcon","NotificationImportant","ChatListaComponent","newChat","props","newChatBtnFn","selectChat","index","selectChatFn","classes","console","log","chats","length","root","newChatBtn","map","_chat","_index","listItem","selectedChatIndex","users","filter","_user","userEmail","split","messages","undefined","message","substring","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport styles from \"./style\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Button from \"@material-ui/core/Button\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport NotificationImportant from \"@material-ui/icons/NotificationImportant\";\n\nclass ChatListaComponent extends React.Component {\n  render() {\n    const { classes } = this.props;\n    console.log(this.props.chats)\n    if (this.props.chats.length === 0 && this.props.chats === []) {\n      console.log(this.props.chats.length)\n      return(\n        <div>Loafding</div>\n      )\n    }else　if(this.props.chats.length > 0){\n      console.log(this.props.chats)\n      return (\n        <main className={classes.root}>\n          <Button\n            variant=\"contained\"\n            fullWidth\n            color=\"primary\"\n            className={classes.newChatBtn}\n            onClick={this.newChat}\n          >\n              新しいメッセージ\n          </Button>\n          <List>\n            {this.props.chats.map((_chat, _index) => {\n              return (\n                <div key={_index}>\n                  <ListItem\n                    onClick={() => this.selectChat(_index)}\n                    className={classes.listItem}\n                    selected={this.props.selectedChatIndex === _index} \n                    alignItems=\"flex-start\"\n                  >\n                    <ListItemAvatar>\n                      <Avatar alt=\"Remy Sharp\">\n                        {\n                          _chat.users\n                            .filter(_user => _user !== this.props.userEmail)[0]\n                            .split(\"\")[0]\n                        }\n                      </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={\n                        _chat.users.filter(\n                          _user => _user !== this.props.userEmail\n                        )[0]\n                      }\n                      secondary={\n                        <Typography component=\"span\" color=\"textPrimary\">\n                         { \n                           _chat.messages === undefined ?\n                           null:\n                           _chat.messages[\n                            _chat.messages.length - 1\n                          ].message.substring(0, 30)\n                        }\n                        </Typography>\n                      }\n                    >\n                    </ListItemText>\n                  </ListItem>\n                  <Divider></Divider>\n                </div>\n              );\n            })}\n          </List>\n        </main>\n      );\n    }else{\n      return(\n        <main className={classes.root}>\n            <Button variant='contained'\n                fullWidth\n                color='primary'\n                onClick={this.newChat}\n                className={classes.newChatBtn}>\n                    おニューなメッセージ\n                </Button>\n                <List></List>\n        </main>\n    )\n    }\n  }\n  // userIsSender = (chat) => chat.messages[chat.messages.length - 1].sender === this.props.userEmail;\n  newChat = () => {\n   this.props.newChatBtnFn()\n  };\n  selectChat = index => {\n    this.props.selectChatFn(index)\n  };\n}\nexport default withStyles(styles)(ChatListaComponent);\n"]},"metadata":{},"sourceType":"module"}