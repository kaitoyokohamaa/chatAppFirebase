{"ast":null,"code":"var _jsxFileName = \"/Users/yokohamakaito/Desktop/chatAppFirebase/src/dashboard/dashboard.js\";\nimport React from \"react\";\nimport ChatList from \"../chatList/chatList\";\nimport { Button, withStyles } from \"@material-ui/core\";\nimport styles from \"./style\";\nimport ChatViewComponent from '../chatview/chatView';\nimport ChatTextBox from '../chattextbox/chattextbox';\n\nconst firebase = require(\"firebase\");\n\nclass DashbordComponent extends React.Component {\n  constructor() {\n    super();\n\n    this.signOut = () => firebase.auth().signOut();\n\n    this.selectChat = chatIndex => {\n      this.setState({\n        selectChat: chatIndex\n      });\n      console.log({\n        selectChat: chatIndex\n      }, chatIndex);\n    };\n\n    this.submitMessageFn = msg => {\n      const docKey = this.buildDocKey(this.state.chats[this.state.selectChat].users.filter(_usr => _usr !== this.state.email)[0]);\n      firebase.firestore().collection('chats').doc(docKey).update({\n        messages: firebase.firestore.FieldValue.arrayUnion({\n          sender: this.state.email,\n          message: msg,\n          timestamp: Date.now()\n        }),\n        receiverHasRead: false\n      });\n    };\n\n    this.buildDocKey = friend => [this.state.email, friend].sort().join(':');\n\n    this.newChatBtnClicked = () => this.setState({\n      newChatFormVisible: true,\n      selectChat: null\n    });\n\n    this.componentDidMount = () => {\n      firebase.auth().onAuthStateChanged(async _user => {\n        if (!_user) this.props.history.push(\"/login\");else {\n          await firebase.firestore().collection(\"chats\").where(\"users\", \"array-contains\", _user.email).onSnapshot(async res => {\n            const chats = res.docs.map(_doc => _doc.data());\n            await this.setState({\n              email: _user.email,\n              chats: chats\n            });\n            console.log(this.state);\n          });\n        }\n      });\n    };\n\n    this.state = {\n      selectChat: null,\n      newChatFormVisible: false,\n      email: null,\n      chats: []\n    };\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ChatList, {\n      history: this.props.history,\n      newChatBtnFn: this.newChatBtnClicked,\n      selectChatFn: this.selectChat,\n      chats: this.state.chats,\n      userEmail: this.state.email,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }\n    }, \" \"), this.state.newChatFormVisible ? null : /*#__PURE__*/React.createElement(ChatViewComponent, {\n      user: this.state.email,\n      chat: this.state.chats[this.state.selectChat],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }\n    }), this.state.selectChat !== null && !this.state.newChatFormVisible ? /*#__PURE__*/React.createElement(ChatTextBox, {\n      submitMessageFn: this.submitMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }\n    }) : null, /*#__PURE__*/React.createElement(Button, {\n      className: classes.signOutBtn,\n      onClick: this.signOut,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, \"Sign Out\"));\n  }\n\n}\n\nexport default withStyles(styles)(DashbordComponent);","map":{"version":3,"sources":["/Users/yokohamakaito/Desktop/chatAppFirebase/src/dashboard/dashboard.js"],"names":["React","ChatList","Button","withStyles","styles","ChatViewComponent","ChatTextBox","firebase","require","DashbordComponent","Component","constructor","signOut","auth","selectChat","chatIndex","setState","console","log","submitMessageFn","msg","docKey","buildDocKey","state","chats","users","filter","_usr","email","firestore","collection","doc","update","messages","FieldValue","arrayUnion","sender","message","timestamp","Date","now","receiverHasRead","friend","sort","join","newChatBtnClicked","newChatFormVisible","componentDidMount","onAuthStateChanged","_user","props","history","push","where","onSnapshot","res","docs","map","_doc","data","render","classes","submitMessage","signOutBtn"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ChatList from \"../chatList/chatList\";\nimport { Button, withStyles } from \"@material-ui/core\";\nimport styles from \"./style\";\nimport ChatViewComponent from '../chatview/chatView'\nimport ChatTextBox from '../chattextbox/chattextbox'\nconst firebase = require(\"firebase\");\nclass DashbordComponent extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      selectChat: null,\n      newChatFormVisible: false,\n      email: null,\n      chats: []\n    };\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <div>\n        <ChatList\n          history={this.props.history}\n          newChatBtnFn={this.newChatBtnClicked}\n          selectChatFn={this.selectChat}\n          chats={this.state.chats}\n          userEmail={this.state.email}\n        >\n          {\" \"}\n        </ChatList>\n        {\n            this.state.newChatFormVisible? \n            null:\n            <ChatViewComponent\n                user={this.state.email}\n                chat={this.state.chats[this.state.selectChat]}\n            ></ChatViewComponent>\n        }\n        {\n          this.state.selectChat !== null && !this.state.newChatFormVisible?\n          <ChatTextBox submitMessageFn={this.submitMessage}/>:null\n        }\n        <Button className={classes.signOutBtn} onClick={this.signOut}>\n          Sign Out\n        </Button>\n      </div>\n    );\n  }\n  signOut= () =>firebase.auth().signOut();\n\n  selectChat = chatIndex => {\n    this.setState({selectChat:chatIndex})\n    console.log({selectChat:chatIndex},chatIndex)\n  };\n\n  submitMessageFn = (msg) => {\n    const docKey = this.buildDocKey(this.state.chats[this.state.selectChat]\n      .users\n      .filter(_usr => _usr !== this.state.email)[0])\n    firebase\n      .firestore()\n      .collection('chats')\n      .doc(docKey)\n      .update({\n        messages: firebase.firestore.FieldValue.arrayUnion({\n          sender: this.state.email,\n          message: msg,\n          timestamp: Date.now()\n        }),\n        receiverHasRead: false\n      });\n  }\n  buildDocKey = (friend) =>[this.state.email,friend].sort().join(':')\n\n  newChatBtnClicked = () =>\n    this.setState({ newChatFormVisible: true, selectChat: null });\n\n  componentDidMount = () => {\n    firebase.auth().onAuthStateChanged(async _user => {\n      if (!_user) this.props.history.push(\"/login\");\n      else {\n        await firebase\n          .firestore()\n          .collection(\"chats\")\n          .where(\"users\", \"array-contains\", _user.email)\n          .onSnapshot(async res => {\n            const chats = res.docs.map(_doc => _doc.data());\n            await this.setState({\n              email: _user.email,\n              chats: chats\n            });\n            console.log(this.state);\n          });\n      }\n    });\n  };\n}\n\nexport default withStyles(styles)(DashbordComponent);\n"]},"metadata":{},"sourceType":"module"}