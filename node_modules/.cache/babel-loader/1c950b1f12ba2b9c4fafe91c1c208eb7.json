{"ast":null,"code":"var _jsxFileName = \"/Users/yokohamakaito/Desktop/chatAppFirebase/src/newChat/newChat.js\";\nimport React from 'react';\nimport { FormControl, InputLabel, Input, Button, Paper, withStyles, CssBaseline, Typography } from '@material-ui/core';\nimport styles from './styles';\n\nconst firebase = require(\"firebase\");\n\nclass NewChatComponent extends React.Component {\n  constructor() {\n    super();\n\n    this.userTyping = (inputType, e) => {\n      switch (inputType) {\n        case 'username':\n          this.setState({\n            username: e.target.value\n          });\n          break;\n\n        case 'message':\n          this.setState({\n            message: e.target.value\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.submitNewChat = async e => {\n      e.preventDefault();\n      const userExists = await this.userExists();\n\n      if (userExists) {\n        const chatExists = await this.chatExists();\n        chatExists ? this.goToChat() : this.createChat();\n      }\n    };\n\n    this.buildDocKey = () => [firebase.auth().currentUser.email, this.state.username].sort().join(':');\n\n    this.createChat = () => {\n      this.props.newChatSubmitFn({\n        sendTo: this.state.username,\n        message: this.state.message\n      });\n    };\n\n    this.goToChat = () => this.props.goToChatFn(this.buildDocKey(), this.state.message);\n\n    this.chatExists = async () => {\n      const docKey = this.buildDocKey();\n      const chat = await firebase.firestore().collection('chats').doc(docKey).get();\n      console.log(chat.exists);\n      return chat.exists;\n    };\n\n    this.userExists = async () => {\n      const usersSnapshot = await firebase.firestore().collection('users').get();\n      const exists = usersSnapshot.docs.map(_doc => _doc.data().email).includes(this.state.username);\n      this.setState({\n        serverError: !exists\n      });\n      return exists;\n    };\n\n    this.state = {\n      username: null,\n      message: null\n    };\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"main\", {\n      className: classes.main,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(CssBaseline, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 20\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      component: \"h1\",\n      variant: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 24\n      }\n    }, \"Send A Message\"), /*#__PURE__*/React.createElement(\"form\", {\n      className: classes.form,\n      onSubmit: e => this.submitNewChat(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 24\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      htmlFor: \"new-chat-username\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 33\n      }\n    }, \"Enter Your Friend's Email\"), /*#__PURE__*/React.createElement(Input, {\n      required: true,\n      className: classes.input,\n      autoFocus: true,\n      onChange: e => this.userTyping('username', e),\n      id: \"new-chat-username\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(FormControl, {\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      htmlFor: \"new-chat-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 33\n      }\n    }, \"Enter Your Message\"), /*#__PURE__*/React.createElement(Input, {\n      required: true,\n      className: classes.input,\n      autoFocus: true,\n      onChange: e => this.userTyping('message', e),\n      id: \"new-chat-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 34\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      fullWidth: true,\n      className: classes.submit,\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 33\n      }\n    }, \" Submit\"))))));\n  }\n\n  componentWillMount() {\n    if (!firebase.auth().currentUser) this.props.history.push('/login');\n  } //     userTyping = (type,e) =>{\n  //         switch(type) {\n  //             case 'username':\n  //                 this.setState({username:e.target.value})\n  //              break;\n  //             case 'message':\n  //                 this.setState({message:e.target.value})\n  //              break;\n  //             default:\n  //             break\n  //         }\n  //     }\n  //     submitNewChat = async(e) =>{\n  //         e.preventDefault();\n  //         const userExists=  await this.userExists();\n  //         console.log(userExists)\n  //         if(userExists){\n  //             const chatExists = await this.chatExists();\n  //             chatExists ? this.goToChat () :this.createChat();\n  //         }\n  //     }\n  //     createChat = () =>{\n  //         this.props.newChatSubmitFn({\n  //             sendToo :this.state.username,\n  //             message:this.state.message\n  //         })\n  //     }\n  //     goToChat = () =>{\n  //         this.props.goToChatFn(\n  //             this.buildDocKey(),\n  //             this.state.message\n  //         )\n  //     }\n  //     buildDocKey = () => [firebase.auth().currentUser.email, this.state.username].sort().join(':');\n  //     chatExists = async () =>{\n  //         const docKey = this.buildDocKey(); \n  //         const chat = await firebase\n  //          .firestore()\n  //          .collection('chats')\n  //          .doc(docKey)\n  //          .get();\n  //          console.log(chat.exists)\n  //          return chat.exists\n  //     }\n  //     userExists = async () => {\n  //         const usersSnapshot = await \n  //         firebase\n  //           .firestore()\n  //           .collection('users')\n  //           .get();\n  //         const exists = usersSnapshot\n  //           .docs\n  //             .map(_doc => _doc.data().email)\n  //             .includes(this.state.username);\n  //         this.setState({ serverError: !exists });\n  //         return exists;\n  //       }\n  // }\n\n\n}\n\nexport default withStyles(styles)(NewChatComponent);","map":{"version":3,"sources":["/Users/yokohamakaito/Desktop/chatAppFirebase/src/newChat/newChat.js"],"names":["React","FormControl","InputLabel","Input","Button","Paper","withStyles","CssBaseline","Typography","styles","firebase","require","NewChatComponent","Component","constructor","userTyping","inputType","e","setState","username","target","value","message","submitNewChat","preventDefault","userExists","chatExists","goToChat","createChat","buildDocKey","auth","currentUser","email","state","sort","join","props","newChatSubmitFn","sendTo","goToChatFn","docKey","chat","firestore","collection","doc","get","console","log","exists","usersSnapshot","docs","map","_doc","data","includes","serverError","render","classes","main","paper","form","input","submit","componentWillMount","history","push"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,KAAlC,EAAyCC,MAAzC,EAAiDC,KAAjD,EAAwDC,UAAxD,EAAoEC,WAApE,EAAiFC,UAAjF,QAAmG,mBAAnG;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AAEA,MAAMC,gBAAN,SAA+BZ,KAAK,CAACa,SAArC,CAA8C;AAE1CC,EAAAA,WAAW,GAAE;AACT;;AADS,SAqDXC,UArDW,GAqDE,CAACC,SAAD,EAAYC,CAAZ,KAAkB;AAC7B,cAAQD,SAAR;AACE,aAAK,UAAL;AACE,eAAKE,QAAL,CAAc;AAAEC,YAAAA,QAAQ,EAAEF,CAAC,CAACG,MAAF,CAASC;AAArB,WAAd;AACA;;AAEF,aAAK,SAAL;AACE,eAAKH,QAAL,CAAc;AAAEI,YAAAA,OAAO,EAAEL,CAAC,CAACG,MAAF,CAASC;AAApB,WAAd;AACA;;AAEF;AACE;AAVJ;AAYD,KAlEU;;AAAA,SAoEXE,aApEW,GAoEK,MAAON,CAAP,IAAa;AAC3BA,MAAAA,CAAC,CAACO,cAAF;AACA,YAAMC,UAAU,GAAG,MAAM,KAAKA,UAAL,EAAzB;;AACA,UAAGA,UAAH,EAAe;AACb,cAAMC,UAAU,GAAG,MAAM,KAAKA,UAAL,EAAzB;AACAA,QAAAA,UAAU,GAAG,KAAKC,QAAL,EAAH,GAAqB,KAAKC,UAAL,EAA/B;AACD;AACF,KA3EU;;AAAA,SA6EXC,WA7EW,GA6EG,MAAM,CAACnB,QAAQ,CAACoB,IAAT,GAAgBC,WAAhB,CAA4BC,KAA7B,EAAoC,KAAKC,KAAL,CAAWd,QAA/C,EAAyDe,IAAzD,GAAgEC,IAAhE,CAAqE,GAArE,CA7ET;;AAAA,SA+EXP,UA/EW,GA+EE,MAAM;AACjB,WAAKQ,KAAL,CAAWC,eAAX,CAA2B;AACzBC,QAAAA,MAAM,EAAE,KAAKL,KAAL,CAAWd,QADM;AAEzBG,QAAAA,OAAO,EAAE,KAAKW,KAAL,CAAWX;AAFK,OAA3B;AAID,KApFU;;AAAA,SAsFXK,QAtFW,GAsFA,MAAM,KAAKS,KAAL,CAAWG,UAAX,CAAsB,KAAKV,WAAL,EAAtB,EAA0C,KAAKI,KAAL,CAAWX,OAArD,CAtFN;;AAAA,SAwFXI,UAxFW,GAwFE,YAAY;AACvB,YAAMc,MAAM,GAAG,KAAKX,WAAL,EAAf;AACA,YAAMY,IAAI,GAAG,MACX/B,QAAQ,CACPgC,SADD,GAECC,UAFD,CAEY,OAFZ,EAGCC,GAHD,CAGKJ,MAHL,EAICK,GAJD,EADF;AAMAC,MAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACO,MAAjB;AACA,aAAOP,IAAI,CAACO,MAAZ;AACD,KAlGU;;AAAA,SAmGXvB,UAnGW,GAmGE,YAAY;AACvB,YAAMwB,aAAa,GAAG,MACtBvC,QAAQ,CACLgC,SADH,GAEGC,UAFH,CAEc,OAFd,EAGGE,GAHH,EADA;AAKA,YAAMG,MAAM,GAAGC,aAAa,CACzBC,IADY,CAEVC,GAFU,CAENC,IAAI,IAAIA,IAAI,CAACC,IAAL,GAAYrB,KAFd,EAGVsB,QAHU,CAGD,KAAKrB,KAAL,CAAWd,QAHV,CAAf;AAIA,WAAKD,QAAL,CAAc;AAAEqC,QAAAA,WAAW,EAAE,CAACP;AAAhB,OAAd;AACA,aAAOA,MAAP;AACD,KA/GU;;AAET,SAAKf,KAAL,GAAa;AACTd,MAAAA,QAAQ,EAAC,IADA;AAETG,MAAAA,OAAO,EAAC;AAFC,KAAb;AAIH;;AAEDkC,EAAAA,MAAM,GAAE;AACJ,UAAM;AAACC,MAAAA;AAAD,QAAY,KAAKrB,KAAvB;AACA,wBACG;AAAM,MAAA,SAAS,EAAEqB,OAAO,CAACC,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAED,OAAO,CAACE,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAC,IAAtB;AAA2B,MAAA,OAAO,EAAC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,eAII;AAAM,MAAA,SAAS,EAAEF,OAAO,CAACG,IAAzB;AAA+B,MAAA,QAAQ,EAAG3C,CAAD,IAAM,KAAKM,aAAL,CAAmBN,CAAnB,CAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACK,oBAAC,WAAD;AAAa,MAAA,SAAS,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,mBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADJ,eAII,oBAAC,KAAD;AAAO,MAAA,QAAQ,MAAf;AACA,MAAA,SAAS,EAAEwC,OAAO,CAACI,KADnB;AAEA,MAAA,SAAS,MAFT;AAGA,MAAA,QAAQ,EAAG5C,CAAD,IAAM,KAAKF,UAAL,CAAgB,UAAhB,EAA2BE,CAA3B,CAHhB;AAIA,MAAA,EAAE,EAAC,mBAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CADL,eAaK,oBAAC,WAAD;AAAa,MAAA,SAAS,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,kBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,eAIK,oBAAC,KAAD;AAAO,MAAA,QAAQ,MAAf;AACD,MAAA,SAAS,EAAEwC,OAAO,CAACI,KADlB;AAED,MAAA,SAAS,MAFR;AAGD,MAAA,QAAQ,EAAG5C,CAAD,IAAM,KAAKF,UAAL,CAAgB,SAAhB,EAA0BE,CAA1B,CAHf;AAID,MAAA,EAAE,EAAC,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJL,eAUI,oBAAC,MAAD;AAAQ,MAAA,SAAS,MAAjB;AAAkB,MAAA,SAAS,EAAEwC,OAAO,CAACK,MAArC;AAA6C,MAAA,OAAO,EAAC,WAArD;AAAiE,MAAA,KAAK,EAAC,SAAvE;AAAiF,MAAA,IAAI,EAAC,QAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAVJ,CAbL,CAJJ,CADJ,CADJ,CADH;AAqCH;;AACDC,EAAAA,kBAAkB,GAAG;AACjB,QAAG,CAACrD,QAAQ,CAACoB,IAAT,GAAgBC,WAApB,EACE,KAAKK,KAAL,CAAW4B,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACH,GArDuC,CAkH9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA/K8C;;AAiL9C,eAAe3D,UAAU,CAACG,MAAD,CAAV,CAAmBG,gBAAnB,CAAf","sourcesContent":["  \nimport React from 'react';\nimport { FormControl, InputLabel, Input, Button, Paper, withStyles, CssBaseline, Typography } from '@material-ui/core';\nimport styles from './styles';\nconst firebase = require(\"firebase\");\n\nclass NewChatComponent extends React.Component{\n\n    constructor(){\n        super();\n        this.state = {\n            username:null,\n            message:null\n        }\n    }\n\n    render(){\n        const {classes} = this.props\n        return (\n           <main className={classes.main}>\n               <CssBaseline>\n                   <Paper className={classes.paper}>\n                       <Typography component=\"h1\" variant=\"h5\">\n                            Send A Message\n                       </Typography>\n                       <form className={classes.form} onSubmit={(e) =>this.submitNewChat(e)}>\n                            <FormControl fullWidth>\n                                <InputLabel htmlFor=\"new-chat-username\">\n                                    Enter Your Friend's Email\n                                </InputLabel>\n                                <Input required\n                                className={classes.input}\n                                autoFocus\n                                onChange={(e) =>this.userTyping('username',e)}\n                                id='new-chat-username'\n                                >\n                                </Input>\n                            </FormControl>\n                            <FormControl fullWidth> \n                                <InputLabel htmlFor=\"new-chat-message\">\n                                    Enter Your Message\n                                </InputLabel>\n                                 <Input required\n                                className={classes.input}\n                                autoFocus\n                                onChange={(e) =>this.userTyping('message',e)}\n                                id='new-chat-message'\n                                ></Input>\n                                <Button fullWidth className={classes.submit} variant=\"contained\" color='primary' type=\"submit\"> Submit</Button>\n                            </FormControl>\n                       </form>\n                   </Paper>\n               </CssBaseline>\n           </main>\n        )\n    }\n    componentWillMount() {\n        if(!firebase.auth().currentUser)\n          this.props.history.push('/login');\n      }\n    \n      userTyping = (inputType, e) => {\n        switch (inputType) {\n          case 'username':\n            this.setState({ username: e.target.value });\n            break;\n          \n          case 'message':\n            this.setState({ message: e.target.value });\n            break;\n    \n          default:\n            break;\n        }\n      }\n    \n      submitNewChat = async (e) => {\n        e.preventDefault();\n        const userExists = await this.userExists();\n        if(userExists) {\n          const chatExists = await this.chatExists();\n          chatExists ? this.goToChat() : this.createChat();\n        }\n      }\n    \n      buildDocKey = () => [firebase.auth().currentUser.email, this.state.username].sort().join(':');\n    \n      createChat = () => {\n        this.props.newChatSubmitFn({\n          sendTo: this.state.username,\n          message: this.state.message\n        });\n      }\n    \n      goToChat = () => this.props.goToChatFn(this.buildDocKey(), this.state.message);\n    \n      chatExists = async () => {\n        const docKey = this.buildDocKey();\n        const chat = await \n          firebase\n          .firestore()\n          .collection('chats')\n          .doc(docKey)\n          .get();\n        console.log(chat.exists);\n        return chat.exists;\n      }\n      userExists = async () => {\n        const usersSnapshot = await \n        firebase\n          .firestore()\n          .collection('users')\n          .get();\n        const exists = usersSnapshot\n          .docs\n            .map(_doc => _doc.data().email)\n            .includes(this.state.username);\n        this.setState({ serverError: !exists });\n        return exists;\n      }\n//     userTyping = (type,e) =>{\n//         switch(type) {\n//             case 'username':\n//                 this.setState({username:e.target.value})\n//              break;\n//             case 'message':\n//                 this.setState({message:e.target.value})\n//              break;\n//             default:\n//             break\n//         }\n//     }\n//     submitNewChat = async(e) =>{\n//         e.preventDefault();\n//         const userExists=  await this.userExists();\n//         console.log(userExists)\n//         if(userExists){\n//             const chatExists = await this.chatExists();\n//             chatExists ? this.goToChat () :this.createChat();\n//         }\n//     }\n\n//     createChat = () =>{\n//         this.props.newChatSubmitFn({\n//             sendToo :this.state.username,\n//             message:this.state.message\n//         })\n//     }\n\n//     goToChat = () =>{\n//         this.props.goToChatFn(\n//             this.buildDocKey(),\n//             this.state.message\n//         )\n//     }\n  \n//     buildDocKey = () => [firebase.auth().currentUser.email, this.state.username].sort().join(':');\n\n//     chatExists = async () =>{\n//         const docKey = this.buildDocKey(); \n//         const chat = await firebase\n//          .firestore()\n//          .collection('chats')\n//          .doc(docKey)\n//          .get();\n//          console.log(chat.exists)\n//          return chat.exists\n//     }\n//     userExists = async () => {\n//         const usersSnapshot = await \n//         firebase\n//           .firestore()\n//           .collection('users')\n//           .get();\n//         const exists = usersSnapshot\n//           .docs\n//             .map(_doc => _doc.data().email)\n//             .includes(this.state.username);\n//         this.setState({ serverError: !exists });\n//         return exists;\n//       }\n// }\n    }\nexport default withStyles(styles)(NewChatComponent);"]},"metadata":{},"sourceType":"module"}