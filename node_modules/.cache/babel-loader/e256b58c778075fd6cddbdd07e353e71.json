{"ast":null,"code":"var _jsxFileName = \"/Users/yokohamakaito/Desktop/chatAppFirebase/src/dashboard/dashboard.js\";\nimport React from 'react'; // import NewChatComponent from '../NewChat/newChat';\n\nimport ChatListComponent from '../chatList/chatList';\nimport ChatViewComponent from '../chatview/chatView';\nimport ChatTextBoxComponent from '../chattextbox/chattextbox';\nimport styles from './style';\nimport { Button, withStyles } from '@material-ui/core';\n\nconst firebase = require(\"firebase\"); // I need to investigate why sometimes\n// two messages will send instead of just\n// one. I dont know if there are two instances\n// of the chat box component or what...\n// I will be using both .then and async/await\n// in this tutorial to give a feel of both.\n\n\nclass DashboardComponent extends React.Component {\n  constructor() {\n    super();\n\n    this.signOut = () => firebase.auth().signOut();\n\n    this.submitMessage = msg => {\n      const docKey = this.buildDocKey(this.state.chats[this.state.selectedChat].users.filter(_usr => _usr !== this.state.email)[0]);\n      firebase.firestore().collection('chats').doc(docKey).update({\n        messages: firebase.firestore.FieldValue.arrayUnion({\n          sender: this.state.email,\n          message: msg,\n          timestamp: Date.now()\n        }),\n        receiverHasRead: false\n      });\n    };\n\n    this.buildDocKey = friend => {\n      [friend, this.state.email].sort().join(':');\n      console.log(friend);\n    };\n\n    this.newChatBtnClicked = () => this.setState({\n      newChatFormVisible: true,\n      selectedChat: null\n    });\n\n    this.newChatSubmit = async chatObj => {\n      const docKey = this.buildDocKey(chatObj.sendTo);\n      await firebase.firestore().collection('chats').doc(docKey).set({\n        messages: [{\n          message: chatObj.message,\n          sender: this.state.email\n        }],\n        users: [this.state.email, chatObj.sendTo],\n        receiverHasRead: false\n      });\n      this.setState({\n        newChatFormVisible: false\n      });\n      this.selectChat(this.state.chats.length - 1);\n    };\n\n    this.selectChat = async chatIndex => {\n      await this.setState({\n        selectedChat: chatIndex,\n        newChatFormVisible: false\n      });\n      this.messageRead();\n    };\n\n    this.goToChat = async (docKey, msg) => {\n      const usersInChat = docKey.split(':');\n      const chat = this.state.chats.find(_chat => usersInChat.every(_user => _chat.users.includes(_user)));\n      this.setState({\n        newChatFormVisible: false\n      });\n      await this.selectChat(this.state.chats.indexOf(chat));\n      this.submitMessage(msg);\n    };\n\n    this.messageRead = () => {\n      const chatIndex = this.state.selectedChat;\n      const docKey = this.buildDocKey(this.state.chats[chatIndex].users.filter(_usr => _usr !== this.state.email)[0]);\n\n      if (this.clickedMessageWhereNotSender(chatIndex)) {\n        firebase.firestore().collection('chats').doc(docKey).update({\n          receiverHasRead: true\n        });\n      } else {\n        console.log('Clicked message where the user was the sender');\n      }\n    };\n\n    this.clickedMessageWhereNotSender = chatIndex => this.state.chats[chatIndex].messages[this.state.chats[chatIndex].messages.length - 1].sender !== this.state.email;\n\n    this.componentWillMount = () => {\n      firebase.auth().onAuthStateChanged(async _usr => {\n        if (!_usr) this.props.history.push('/login');else {\n          await firebase.firestore().collection('chats').where('users', 'array-contains', _usr.email).onSnapshot(async res => {\n            const chats = res.docs.map(_doc => _doc.data());\n            await this.setState({\n              email: _usr.email,\n              chats: chats,\n              friends: []\n            });\n          });\n        }\n      });\n    };\n\n    this.state = {\n      selectedChat: null,\n      newChatFormVisible: false,\n      email: null,\n      friends: [],\n      chats: []\n    };\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n\n    if (this.state.email) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"dashboard-container\",\n        id: \"dashboard-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ChatListComponent, {\n        history: this.props.history,\n        userEmail: this.state.email,\n        selectChatFn: this.selectChat,\n        chats: this.state.chats,\n        selectedChatIndex: this.state.selectedChat,\n        newChatBtnFn: this.newChatBtnClicked,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }\n      }), this.state.newChatFormVisible ? null : /*#__PURE__*/React.createElement(ChatViewComponent, {\n        user: this.state.email,\n        chat: this.state.chats[this.state.selectedChat],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 52\n        }\n      }), this.state.selectedChat !== null && !this.state.newChatFormVisible ? /*#__PURE__*/React.createElement(ChatTextBoxComponent, {\n        userClickedInputFn: this.messageRead,\n        submitMessageFn: this.submitMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 82\n        }\n      }) : null, /*#__PURE__*/React.createElement(Button, {\n        onClick: this.signOut,\n        className: classes.signOutBtn,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }\n      }, \"Sign Out\"));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 14\n        }\n      }, \"LOADING....\");\n    }\n  }\n\n}\n\nexport default withStyles(styles)(DashboardComponent);","map":{"version":3,"sources":["/Users/yokohamakaito/Desktop/chatAppFirebase/src/dashboard/dashboard.js"],"names":["React","ChatListComponent","ChatViewComponent","ChatTextBoxComponent","styles","Button","withStyles","firebase","require","DashboardComponent","Component","constructor","signOut","auth","submitMessage","msg","docKey","buildDocKey","state","chats","selectedChat","users","filter","_usr","email","firestore","collection","doc","update","messages","FieldValue","arrayUnion","sender","message","timestamp","Date","now","receiverHasRead","friend","sort","join","console","log","newChatBtnClicked","setState","newChatFormVisible","newChatSubmit","chatObj","sendTo","set","selectChat","length","chatIndex","messageRead","goToChat","usersInChat","split","chat","find","_chat","every","_user","includes","indexOf","clickedMessageWhereNotSender","componentWillMount","onAuthStateChanged","props","history","push","where","onSnapshot","res","docs","map","_doc","data","friends","render","classes","signOutBtn"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,iBAAP,MAA8B,sBAA9B;AACA,OAAOC,iBAAP,MAA8B,sBAA9B;AACA,OAAOC,oBAAP,MAAiC,4BAAjC;AACA,OAAOC,MAAP,MAAmB,SAAnB;AACA,SAASC,MAAT,EAAiBC,UAAjB,QAAmC,mBAAnC;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB,C,CAEA;AACA;AACA;AACA;AAEA;AACA;;;AAEA,MAAMC,kBAAN,SAAiCT,KAAK,CAACU,SAAvC,CAAiD;AAE/CC,EAAAA,WAAW,GAAG;AACZ;;AADY,SA6CdC,OA7Cc,GA6CJ,MAAML,QAAQ,CAACM,IAAT,GAAgBD,OAAhB,EA7CF;;AAAA,SA+CdE,aA/Cc,GA+CGC,GAAD,IAAS;AACvB,YAAMC,MAAM,GAAG,KAAKC,WAAL,CAAiB,KAAKC,KAAL,CAAWC,KAAX,CAAiB,KAAKD,KAAL,CAAWE,YAA5B,EAC7BC,KAD6B,CAE7BC,MAF6B,CAEtBC,IAAI,IAAIA,IAAI,KAAK,KAAKL,KAAL,CAAWM,KAFN,EAEa,CAFb,CAAjB,CAAf;AAGAjB,MAAAA,QAAQ,CACLkB,SADH,GAEGC,UAFH,CAEc,OAFd,EAGGC,GAHH,CAGOX,MAHP,EAIGY,MAJH,CAIU;AACNC,QAAAA,QAAQ,EAAEtB,QAAQ,CAACkB,SAAT,CAAmBK,UAAnB,CAA8BC,UAA9B,CAAyC;AACjDC,UAAAA,MAAM,EAAE,KAAKd,KAAL,CAAWM,KAD8B;AAEjDS,UAAAA,OAAO,EAAElB,GAFwC;AAGjDmB,UAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAHsC,SAAzC,CADJ;AAMNC,QAAAA,eAAe,EAAE;AANX,OAJV;AAYD,KA/Da;;AAAA,SAmEdpB,WAnEc,GAmECqB,MAAD,IAAY;AACxB,OAACA,MAAD,EAAQ,KAAKpB,KAAL,CAAWM,KAAnB,EAA0Be,IAA1B,GAAiCC,IAAjC,CAAsC,GAAtC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACD,KAtEa;;AAAA,SAwEdK,iBAxEc,GAwEM,MAAM,KAAKC,QAAL,CAAc;AAAEC,MAAAA,kBAAkB,EAAE,IAAtB;AAA4BzB,MAAAA,YAAY,EAAE;AAA1C,KAAd,CAxEZ;;AAAA,SA0Ed0B,aA1Ec,GA0EE,MAAOC,OAAP,IAAmB;AACjC,YAAM/B,MAAM,GAAG,KAAKC,WAAL,CAAiB8B,OAAO,CAACC,MAAzB,CAAf;AACA,YACEzC,QAAQ,CACLkB,SADH,GAEGC,UAFH,CAEc,OAFd,EAGGC,GAHH,CAGOX,MAHP,EAIGiC,GAJH,CAIO;AACHpB,QAAAA,QAAQ,EAAE,CAAC;AACTI,UAAAA,OAAO,EAAEc,OAAO,CAACd,OADR;AAETD,UAAAA,MAAM,EAAE,KAAKd,KAAL,CAAWM;AAFV,SAAD,CADP;AAKHH,QAAAA,KAAK,EAAE,CAAC,KAAKH,KAAL,CAAWM,KAAZ,EAAmBuB,OAAO,CAACC,MAA3B,CALJ;AAMHX,QAAAA,eAAe,EAAE;AANd,OAJP,CADF;AAaA,WAAKO,QAAL,CAAc;AAAEC,QAAAA,kBAAkB,EAAE;AAAtB,OAAd;AACA,WAAKK,UAAL,CAAgB,KAAKhC,KAAL,CAAWC,KAAX,CAAiBgC,MAAjB,GAA0B,CAA1C;AACD,KA3Fa;;AAAA,SA6FdD,UA7Fc,GA6FD,MAAOE,SAAP,IAAqB;AAChC,YAAM,KAAKR,QAAL,CAAc;AAAExB,QAAAA,YAAY,EAAEgC,SAAhB;AAA2BP,QAAAA,kBAAkB,EAAE;AAA/C,OAAd,CAAN;AACA,WAAKQ,WAAL;AACD,KAhGa;;AAAA,SAkGdC,QAlGc,GAkGH,OAAOtC,MAAP,EAAeD,GAAf,KAAuB;AAChC,YAAMwC,WAAW,GAAGvC,MAAM,CAACwC,KAAP,CAAa,GAAb,CAApB;AACA,YAAMC,IAAI,GAAG,KAAKvC,KAAL,CAAWC,KAAX,CAAiBuC,IAAjB,CAAsBC,KAAK,IAAIJ,WAAW,CAACK,KAAZ,CAAkBC,KAAK,IAAIF,KAAK,CAACtC,KAAN,CAAYyC,QAAZ,CAAqBD,KAArB,CAA3B,CAA/B,CAAb;AACA,WAAKjB,QAAL,CAAc;AAAEC,QAAAA,kBAAkB,EAAE;AAAtB,OAAd;AACA,YAAM,KAAKK,UAAL,CAAgB,KAAKhC,KAAL,CAAWC,KAAX,CAAiB4C,OAAjB,CAAyBN,IAAzB,CAAhB,CAAN;AACA,WAAK3C,aAAL,CAAmBC,GAAnB;AACD,KAxGa;;AAAA,SA6GdsC,WA7Gc,GA6GA,MAAM;AAClB,YAAMD,SAAS,GAAG,KAAKlC,KAAL,CAAWE,YAA7B;AACA,YAAMJ,MAAM,GAAG,KAAKC,WAAL,CAAiB,KAAKC,KAAL,CAAWC,KAAX,CAAiBiC,SAAjB,EAA4B/B,KAA5B,CAAkCC,MAAlC,CAAyCC,IAAI,IAAIA,IAAI,KAAK,KAAKL,KAAL,CAAWM,KAArE,EAA4E,CAA5E,CAAjB,CAAf;;AACA,UAAG,KAAKwC,4BAAL,CAAkCZ,SAAlC,CAAH,EAAiD;AAC/C7C,QAAAA,QAAQ,CACLkB,SADH,GAEGC,UAFH,CAEc,OAFd,EAGGC,GAHH,CAGOX,MAHP,EAIGY,MAJH,CAIU;AAAES,UAAAA,eAAe,EAAE;AAAnB,SAJV;AAKD,OAND,MAMO;AACLI,QAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ;AACD;AACF,KAzHa;;AAAA,SA2HdsB,4BA3Hc,GA2HkBZ,SAAD,IAAe,KAAKlC,KAAL,CAAWC,KAAX,CAAiBiC,SAAjB,EAA4BvB,QAA5B,CAAqC,KAAKX,KAAL,CAAWC,KAAX,CAAiBiC,SAAjB,EAA4BvB,QAA5B,CAAqCsB,MAArC,GAA8C,CAAnF,EAAsFnB,MAAtF,KAAiG,KAAKd,KAAL,CAAWM,KA3H5I;;AAAA,SA6HdyC,kBA7Hc,GA6HO,MAAM;AACvB1D,MAAAA,QAAQ,CAACM,IAAT,GAAgBqD,kBAAhB,CAAmC,MAAM3C,IAAN,IAAc;AAC/C,YAAG,CAACA,IAAJ,EACE,KAAK4C,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB,EADF,KAEK;AACH,gBAAM9D,QAAQ,CACXkB,SADG,GAEHC,UAFG,CAEQ,OAFR,EAGH4C,KAHG,CAGG,OAHH,EAGY,gBAHZ,EAG8B/C,IAAI,CAACC,KAHnC,EAIH+C,UAJG,CAIQ,MAAMC,GAAN,IAAa;AACvB,kBAAMrD,KAAK,GAAGqD,GAAG,CAACC,IAAJ,CAASC,GAAT,CAAaC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAArB,CAAd;AACA,kBAAM,KAAKhC,QAAL,CAAc;AAClBpB,cAAAA,KAAK,EAAED,IAAI,CAACC,KADM;AAElBL,cAAAA,KAAK,EAAEA,KAFW;AAGlB0D,cAAAA,OAAO,EAAE;AAHS,aAAd,CAAN;AAKD,WAXG,CAAN;AAYD;AACJ,OAjBC;AAkBH,KAhJa;;AAEZ,SAAK3D,KAAL,GAAa;AACXE,MAAAA,YAAY,EAAE,IADH;AAEXyB,MAAAA,kBAAkB,EAAE,KAFT;AAGXrB,MAAAA,KAAK,EAAE,IAHI;AAIXqD,MAAAA,OAAO,EAAE,EAJE;AAKX1D,MAAAA,KAAK,EAAE;AALI,KAAb;AAOD;;AAED2D,EAAAA,MAAM,GAAG;AAEP,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKZ,KAAzB;;AAEA,QAAG,KAAKjD,KAAL,CAAWM,KAAd,EAAqB;AACnB,0BACE;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAqC,QAAA,EAAE,EAAC,qBAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,iBAAD;AAAmB,QAAA,OAAO,EAAE,KAAK2C,KAAL,CAAWC,OAAvC;AACE,QAAA,SAAS,EAAE,KAAKlD,KAAL,CAAWM,KADxB;AAEE,QAAA,YAAY,EAAE,KAAK0B,UAFrB;AAGE,QAAA,KAAK,EAAE,KAAKhC,KAAL,CAAWC,KAHpB;AAIE,QAAA,iBAAiB,EAAE,KAAKD,KAAL,CAAWE,YAJhC;AAKE,QAAA,YAAY,EAAE,KAAKuB,iBALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EASI,KAAKzB,KAAL,CAAW2B,kBAAX,GAAgC,IAAhC,gBAAuC,oBAAC,iBAAD;AACrC,QAAA,IAAI,EAAE,KAAK3B,KAAL,CAAWM,KADoB;AAErC,QAAA,IAAI,EAAE,KAAKN,KAAL,CAAWC,KAAX,CAAiB,KAAKD,KAAL,CAAWE,YAA5B,CAF+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAT3C,EAeI,KAAKF,KAAL,CAAWE,YAAX,KAA4B,IAA5B,IAAoC,CAAC,KAAKF,KAAL,CAAW2B,kBAAhD,gBAAqE,oBAAC,oBAAD;AAAsB,QAAA,kBAAkB,EAAE,KAAKQ,WAA/C;AAA4D,QAAA,eAAe,EAAE,KAAKvC,aAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAArE,GAAgM,IAfpM,eAoBE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKF,OAAtB;AAA+B,QAAA,SAAS,EAAEmE,OAAO,CAACC,UAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBApBF,CADF;AAwBD,KAzBD,MAyBO;AACL,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAP;AACD;AACF;;AA7C8C;;AAqJjD,eAAe1E,UAAU,CAACF,MAAD,CAAV,CAAmBK,kBAAnB,CAAf","sourcesContent":["import React from 'react';\n// import NewChatComponent from '../NewChat/newChat';\nimport ChatListComponent from '../chatList/chatList';\nimport ChatViewComponent from '../chatview/chatView';\nimport ChatTextBoxComponent from '../chattextbox/chattextbox';\nimport styles from './style';\nimport { Button, withStyles } from '@material-ui/core';\nconst firebase = require(\"firebase\");\n\n// I need to investigate why sometimes\n// two messages will send instead of just\n// one. I dont know if there are two instances\n// of the chat box component or what...\n\n// I will be using both .then and async/await\n// in this tutorial to give a feel of both.\n\nclass DashboardComponent extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      selectedChat: null,\n      newChatFormVisible: false,\n      email: null,\n      friends: [],\n      chats: []\n    };\n  }\n\n  render() {\n\n    const { classes } = this.props;\n\n    if(this.state.email) {\n      return(\n        <div className='dashboard-container' id='dashboard-container'>\n          <ChatListComponent history={this.props.history} \n            userEmail={this.state.email} \n            selectChatFn={this.selectChat} \n            chats={this.state.chats} \n            selectedChatIndex={this.state.selectedChat}\n            newChatBtnFn={this.newChatBtnClicked}>\n          </ChatListComponent>\n          {\n            this.state.newChatFormVisible ? null : <ChatViewComponent \n              user={this.state.email} \n              chat={this.state.chats[this.state.selectedChat]}>\n            </ChatViewComponent>\n          }\n          { \n            this.state.selectedChat !== null && !this.state.newChatFormVisible ? <ChatTextBoxComponent userClickedInputFn={this.messageRead} submitMessageFn={this.submitMessage}></ChatTextBoxComponent> : null \n          }\n          {/* {\n            this.state.newChatFormVisible ? <NewChatComponent goToChatFn={this.goToChat} newChatSubmitFn={this.newChatSubmit}></NewChatComponent> : null\n          } */}\n          <Button onClick={this.signOut} className={classes.signOutBtn}>Sign Out</Button>\n        </div>\n      );\n    } else {\n      return(<div>LOADING....</div>);\n    }\n  }\n\n  signOut = () => firebase.auth().signOut();\n\n  submitMessage = (msg) => {\n    const docKey = this.buildDocKey(this.state.chats[this.state.selectedChat]\n      .users\n      .filter(_usr => _usr !== this.state.email)[0])\n    firebase\n      .firestore()\n      .collection('chats')\n      .doc(docKey)\n      .update({\n        messages: firebase.firestore.FieldValue.arrayUnion({\n          sender: this.state.email,\n          message: msg,\n          timestamp: Date.now()\n        }),\n        receiverHasRead: false\n      });\n  }\n\n  // Always in alphabetical order:\n  // 'user1:user2'\n  buildDocKey = (friend) => {\n    [friend,this.state.email].sort().join(':')\n    console.log(friend)\n  }\n\n  newChatBtnClicked = () => this.setState({ newChatFormVisible: true, selectedChat: null });\n\n  newChatSubmit = async (chatObj) => {\n    const docKey = this.buildDocKey(chatObj.sendTo);\n    await \n      firebase\n        .firestore()\n        .collection('chats')\n        .doc(docKey)\n        .set({\n          messages: [{\n            message: chatObj.message,\n            sender: this.state.email\n          }],\n          users: [this.state.email, chatObj.sendTo],\n          receiverHasRead: false\n        })\n    this.setState({ newChatFormVisible: false });\n    this.selectChat(this.state.chats.length - 1);\n  }\n\n  selectChat = async (chatIndex) => {\n    await this.setState({ selectedChat: chatIndex, newChatFormVisible: false });\n    this.messageRead();\n  }\n\n  goToChat = async (docKey, msg) => {\n    const usersInChat = docKey.split(':');\n    const chat = this.state.chats.find(_chat => usersInChat.every(_user => _chat.users.includes(_user)));\n    this.setState({ newChatFormVisible: false });\n    await this.selectChat(this.state.chats.indexOf(chat));\n    this.submitMessage(msg);\n  }\n\n  // Chat index could be different than the one we are currently on in the case\n  // that we are calling this function from within a loop such as the chatList.\n  // So we will set a default value and can overwrite it when necessary.\n  messageRead = () => {\n    const chatIndex = this.state.selectedChat;\n    const docKey = this.buildDocKey(this.state.chats[chatIndex].users.filter(_usr => _usr !== this.state.email)[0]);\n    if(this.clickedMessageWhereNotSender(chatIndex)) {\n      firebase\n        .firestore()\n        .collection('chats')\n        .doc(docKey)\n        .update({ receiverHasRead: true });\n    } else {\n      console.log('Clicked message where the user was the sender');\n    }\n  }\n\n  clickedMessageWhereNotSender = (chatIndex) => this.state.chats[chatIndex].messages[this.state.chats[chatIndex].messages.length - 1].sender !== this.state.email;\n\n  componentWillMount = () => {\n      firebase.auth().onAuthStateChanged(async _usr => {\n        if(!_usr)\n          this.props.history.push('/login');\n        else {\n          await firebase\n            .firestore()\n            .collection('chats')\n            .where('users', 'array-contains', _usr.email)\n            .onSnapshot(async res => {\n              const chats = res.docs.map(_doc => _doc.data());\n              await this.setState({\n                email: _usr.email,\n                chats: chats,\n                friends: []\n              });\n            })\n        }\n    });\n  }\n}\n\nexport default withStyles(styles)(DashboardComponent);\n"]},"metadata":{},"sourceType":"module"}